services:

  # A Windows-based nodejs base image
  nodejs:
    # DEMO TEAM CUSTOMIZATION - demo subfolder, custom tag
    image: ${REGISTRY}demo/${COMPOSE_PROJECT_NAME}-nodejs:${SITECORE_VERSION}-${DEMO_VERSION}
    build:
      context: ./docker/build/nodejs
      args:
        PARENT_IMAGE: ${NODEJS_PARENT_IMAGE}
        NODEJS_VERSION: ${NODEJS_VERSION}
    scale: 0

  # The solution build image is added here so it can be referenced as a build dependency
  # for the images which use its output. Setting "scale: 0" means docker-compose will not
  # include it in the running environment. See Dockerfile for more details.
  solution:
    # DEMO TEAM CUSTOMIZATION - demo subfolder, custom tag
    image: ${REGISTRY}demo/${COMPOSE_PROJECT_NAME}-solution:${SITECORE_VERSION}-${DEMO_VERSION}
    build:
      context: .
      args:
        BUILD_CONFIGURATION: ${BUILD_CONFIGURATION}
        BUILD_IMAGE: mcr.microsoft.com/dotnet/framework/sdk:4.8-windowsservercore-ltsc2019
    scale: 0

  rendering:
    # DEMO TEAM CUSTOMIZATION - demo subfolder, custom tag
    image: ${REGISTRY}demo/${COMPOSE_PROJECT_NAME}-rendering:${SITECORE_VERSION}-${DEMO_VERSION}
    build:
      context: ./docker/build/rendering
      target: ${BUILD_CONFIGURATION}
      args:
        # DEMO TEAM CUSTOMIZATION - demo subfolder, custom tag
        PARENT_IMAGE: ${REGISTRY}demo/${COMPOSE_PROJECT_NAME}-nodejs:${SITECORE_VERSION}-${DEMO_VERSION}
    # DEMO TEAM CUSTOMIZATION - More RAM
    mem_limit: 2GB
    # DEMO TEAM CUSTOMIZATION - Add port mapping to allow opening a ngrok tunnel to the rendering host
    ports:
      - "8099:3000"
    volumes:
      - .\src\rendering:C:\app
    environment:
      SITECORE_API_HOST: "http://cm"
      NEXTJS_DIST_DIR: ".next-container"
      PUBLIC_URL: "https://${RENDERING_HOST}"
      JSS_EDITING_SECRET: ${JSS_EDITING_SECRET}
      GRAPH_QL_ENDPOINT: "${GRAPH_QL_ENDPOINT}"
      SITECORE_API_KEY: "${SITECORE_API_KEY}"
      NEXT_PUBLIC_CDP_PROXY_URL: https://${CDP_PROXY_HOST}
      NEXT_PUBLIC_CDP_CLIENT_KEY: ${CDP_CLIENT_KEY}
      NEXT_PUBLIC_CDP_API_TARGET_ENDPOINT: ${CDP_API_TARGET_ENDPOINT}/v1.2
      NEXT_PUBLIC_DISCOVER_CUSTOMER_KEY: ${DISCOVER_CUSTOMER_KEY}
      NEXT_PUBLIC_DISCOVER_API_KEY: ${DISCOVER_API_KEY}
      NEXT_PUBLIC_ORDERCLOUD_BUYER_CLIENT_ID: ${ORDERCLOUD_BUYER_CLIENT_ID}
      NEXT_PUBLIC_ORDERCLOUD_BASE_API_URL: ${ORDERCLOUD_BASE_API_URL}
      NEXT_PUBLIC_ORDERCLOUD_OPENID_CONNECT_ID: ${ORDERCLOUD_OPENID_CONNECT_ID}
      ORDERCLOUD_MIDDLEWARE_CLIENT_ID: ${ORDERCLOUD_MIDDLEWARE_CLIENT_ID}
      ORDERCLOUD_MIDDLEWARE_CLIENT_SECRET: ${ORDERCLOUD_MIDDLEWARE_CLIENT_SECRET}
      OC_API_CLIENTS_WITH_ACCESS: ${ORDERCLOUD_MIDDLEWARE_ALLOWED_CLIENTIDS} # Not referenced in our code but used by the catalyst library https://github.com/ordercloud-api/ordercloud-javascript-catalyst#user-verification
      OC_WEBHOOK_HASH_KEY: ${ORDERCLOUD_WEBHOOK_HASH_KEY} # Not referenced in our code but used by the catalyst library https://github.com/ordercloud-api/ordercloud-javascript-catalyst/blob/main/README.md#webhook-verification
      # Auth0 - Not referenced in our code but used by the @auth0/nextjs-auth0 library
      AUTH0_SECRET: ${AUTH0_SECRET}
      AUTH0_BASE_URL: ${AUTH0_BASE_URL}
      AUTH0_ISSUER_BASE_URL: ${AUTH0_ISSUER_BASE_URL}
      AUTH0_CLIENT_ID: ${AUTH0_CLIENT_ID}
      AUTH0_CLIENT_SECRET: ${AUTH0_CLIENT_SECRET}
      NEXT_PUBLIC_AUTH0_ENABLED: ${AUTH0_ENABLED}
      #DEBUG: ${DEBUG} # Uncomment this line and set the DEBUG environment variable value in the .env file to enable debug logging
    depends_on:
      - cm
      - nodejs
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.rendering-secure.entrypoints=websecure"
      - "traefik.http.routers.rendering-secure.rule=Host(`${RENDERING_HOST}`)"
      - "traefik.http.routers.rendering-secure.tls=true"

  # Sitecore CDP Proxy
  cdp:
    image: ${REGISTRY}demo/${COMPOSE_PROJECT_NAME}-cdp:${SITECORE_VERSION}--${DEMO_VERSION}
    build:
      context: ./docker/build/cdp
    environment:
      ASPNETCORE_URLS: "http://*:5000"
      CDP_API_TARGET_ENDPOINT: ${CDP_API_TARGET_ENDPOINT}/v2
      CDP_CLIENT_KEY: ${CDP_CLIENT_KEY}
      CDP_API_TOKEN: ${CDP_API_TOKEN}
    labels:
      - "traefik.enable=true"
      - "traefik.http.middlewares.force-STS-Header.headers.forceSTSHeader=true"
      - "traefik.http.middlewares.force-STS-Header.headers.stsSeconds=31536000"
      - "traefik.http.routers.cdp-secure.entrypoints=websecure"
      - "traefik.http.routers.cdp-secure.rule=Host(`${CDP_PROXY_HOST}`)"
      - "traefik.http.routers.cdp-secure.tls=true"
      - "traefik.http.routers.cdp-secure.middlewares=force-STS-Header"
      - "traefik.http.services.cdp.loadbalancer.server.port=5000"

  # init:
  #   healthcheck:
  #     test: ["CMD", "powershell", "ps"]
  #   image: ${REGISTRY}demo/${COMPOSE_PROJECT_NAME}-init:${SITECORE_VERSION}-${DEMO_VERSION}
  #   isolation: ${ISOLATION}
  #   build:
  #     context: .\docker\build\init
  #     args:
  #       BUILD_IMAGE: mcr.microsoft.com/dotnet/sdk:3.1-nanoserver-${NANOSERVER_VERSION}
  #       BASE_IMAGE: mcr.microsoft.com/dotnet/sdk:3.1-nanoserver-${NANOSERVER_VERSION}
  #       SOLUTION_IMAGE: ${REGISTRY}demo/${COMPOSE_PROJECT_NAME}-solution:${SITECORE_VERSION}-${DEMO_VERSION}
  #       NODEJS_VERSION: ${NODEJS_VERSION}
  #   environment:
  #     ADMIN_PASSWORD: ${SITECORE_ADMIN_PASSWORD}
  #     ADMIN_USER_NAME: "sitecore\\superuser"
  #     HOST_CM: "http://cm"
  #     HOST_ID: "http://id"
  #     INIT_CONTEXT: Data Source=${SQL_SERVER};Initial Catalog=platform_init_ready;User ID=${SQL_SA_LOGIN};Password=${SQL_SA_PASSWORD}
  #     VERCEL_TOKEN: ${VERCEL_TOKEN}
  #     PUBLIC_HOST_CM: ${PUBLIC_HOST_CM}
  #     PUBLIC_HOST_ID: ${PUBLIC_HOST_ID}
  #     DAM_URL: ${DAM_ContentHub}
  #   depends_on:
  #     mssql:
  #       condition: service_healthy
  #     cm:
  #       condition: service_healthy
  #     solution:
  #       condition: service_started
  #   deploy:
  #     replicas: ${INIT_CONTAINERS_COUNT}

  # Mount the Traefik configuration and certs.
  traefik:
    volumes:
      - ./docker/traefik:C:/etc/traefik
    depends_on:
      - rendering

  # Mount our SQL data folder and use our custom image with the Headless Services (JSS)
  # module data added. See Dockerfile for details.
  mssql:
    # DEMO TEAM CUSTOMIZATION - More RAM
    mem_limit: 2GB
    volumes:
      - type: bind
        source: .\docker\data\sql
        target: c:\data

  # Custom mssql init
  mssql-init:
    image: ${REGISTRY}demo/${COMPOSE_PROJECT_NAME}-mssql-init:${SITECORE_VERSION}-${DEMO_VERSION}
    build:
      context: ./docker/build/mssql-init
      args:
        PARENT_IMAGE: ${SITECORE_DOCKER_REGISTRY}sitecore-xmcloud-mssql-init:${SITECORE_VERSION}
        CONTENTHUB_ASSETS_IMAGE: ${SITECORE_NONPRODUCTION_DOCKER_REGISTRY}modules/sitecore-chub-assets:5.0.0-${NANOSERVER_VERSION}
        SOLUTION_IMAGE: ${REGISTRY}demo/${COMPOSE_PROJECT_NAME}-solution:${SITECORE_VERSION}-${DEMO_VERSION}
    depends_on:
      mssql:
        condition: service_healthy
      solution:
        condition: service_started

  # Mount our Solr data folder and use our retagged Solr image.
  # Some modules (like SXA) also require additions to the Solr image.
  solr:
    volumes:
      - type: bind
        source: .\docker\data\solr
        target: c:\data

  # Use our custom CM image with added modules and solution code.
  # Folders are mounted below for code deployment and log output. See Dockerfile for details.
  # Configure for a mounted license file instead of using SITECORE_LICENSE.
  cm:
    # DEMO TEAM CUSTOMIZATION - demo subfolder, custom tag
    image: ${REGISTRY}demo/${COMPOSE_PROJECT_NAME}-cm:${SITECORE_VERSION}-${DEMO_VERSION}
    build:
      context: ./docker/build/cm
      args:
        PARENT_IMAGE: ${SITECORE_DOCKER_REGISTRY}sitecore-xmcloud-cm:${SITECORE_VERSION}
        # DEMO TEAM CUSTOMIZATION - demo subfolder, custom tag
        SOLUTION_IMAGE: ${REGISTRY}demo/${COMPOSE_PROJECT_NAME}-solution:${SITECORE_VERSION}-${DEMO_VERSION}
        TOOLS_IMAGE: ${TOOLS_IMAGE}
        # DEMO TEAM CUSTOMIZATION - Content Hub module
        CONTENTHUB_ASSETS_IMAGE: ${SITECORE_NONPRODUCTION_DOCKER_REGISTRY}modules/sitecore-chub-assets:5.0.0-${NANOSERVER_VERSION}
    depends_on:
      - solution
    volumes:
      # DEMO TEAM CUSTOMIZATION - Removed the platform subfolder
      - ${LOCAL_DEPLOY_PATH}:C:\deploy
      - ${LOCAL_DATA_PATH}\cm:C:\inetpub\wwwroot\App_Data\logs
      - ${HOST_LICENSE_FOLDER}:c:\license
    environment:
      SITECORE_LICENSE_LOCATION: c:\license\license.xml
      JSS_EdgeWebsite_DEPLOYMENT_SECRET: ${JSS_EdgeWebsite_DEPLOYMENT_SECRET}
      SITECORE_JSS_EDITING_SECRET: ${JSS_EDITING_SECRET}
      ## Custom variable to allow override in AKS
      RENDERING_HOST_ENDPOINT_URI: "http://rendering:3000/api/editing/render"
      RENDERING_HOST_PUBLIC_URI: "https://${RENDERING_HOST}"
      ## Development Environment Optimizations
      SITECORE_DEVELOPMENT_PATCHES: DevEnvOn,CustomErrorsOff,DebugOn,DiagnosticsOff,InitMessagesOff,RobotDetectionOff
      Sitecore_AppSettings_exmEnabled:define: "no" # remove to turn on EXM
      Sitecore_ConnectionStrings_CMP.ContentHub: ${CMP_ContentHub}
      Sitecore_ConnectionStrings_CMP.ServiceBusEntityPathIn: ${CMP_ServiceBusEntityPathIn}
      Sitecore_ConnectionStrings_CMP.ServiceBusSubscription: ${CMP_ServiceBusSubscription}
      Sitecore_ConnectionStrings_CMP.ServiceBusEntityPathOut: ${CMP_ServiceBusEntityPathOut}
      Sitecore_ConnectionStrings_DAM.ContentHub: ${DAM_ContentHub}
      Sitecore_ConnectionStrings_DAM.SearchPage: ${DAM_SearchPage}
      Sitecore_ConnectionStrings_DAM.ExternalRedirectKey: ${DAM_ExternalRedirectKey}
    entrypoint: powershell -Command "& C:/tools/entrypoints/iis/Development.ps1"